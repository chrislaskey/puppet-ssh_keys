<%
# Creates a private and public key on the puppetmaster server if needed. Then
# returns the private key for placement on the puppet client. The new keys
# are authorized on the puppetmaster in a separate process.
#
# Note: ERB files in puppet run on the puppetmaster as the puppet user,
# not as root.

def sh (command)
	%x[ #{command} ]
	return $? == 0
end

def error (message)
	raise Puppet::Error, "\nError creating ssh key for user '#{local_user}'. #{message}"
end

def set_variables ()
	$private_key_dir = "#{puppetmaster_key_dir}/private/#{local_fqdn}"
	$private_key_name = "#{target_user}.#{local_user}.#{fqdn}"
	$private_key = "#{$private_key_dir}/#{$private_key_name}"

	$public_key_dir = "#{puppetmaster_key_dir}/public/#{target_fqdn}"
	$public_key_name = "#{$private_key_name}.pub"
	$public_key = "#{$public_key_dir}/#{$public_key_name}"

	$generated_private_key = "#{$private_key}-generated"
	$generated_public_key = "#{$generated_private_key}.pub"

	$user_hostname_generated = "`id -un`@`hostname`"
	$user_hostname_replacement = "#{local_user}\@#{hostname}"
end

def verify_puppetmaster_environment ()
	command = "mkdir -p #{puppetmaster_key_dir}"
	if not sh (command)
		error "The key path on puppetmaster does not exist and could not be created, '#{puppetmaster_key_dir}'."
	end

	command = "mkdir -p #{$private_key_dir}"
	if not sh (command)
		error "The private key directory on puppet master does not exist and could not be created, '#{$private_key_dir}'."
	end

	command = "chmod 0700 #{$private_key_dir}"
	sh (command)

	command = "mkdir -p #{$public_key_dir}"
	if not sh (command)
		error "The public key directory on puppet master does not exist and could not be created, '#{$public_key_dir}'."
	end

	command = "chmod 0700 #{$public_key_dir}"
	sh (command)
end

def public_key_exists ()
	command = "test -f #{$public_key}"
	return sh (command)
end

def private_key_exists ()
	command = "test -f #{$private_key}"
	return sh (command)
end

def generate_keys ()
	command = "ssh-keygen -f '#{$generated_private_key}' -N ''"
	return sh (command)
end

def move_public_key ()
	command = "mv #{$generated_public_key} #{$public_key}"
	return sh (command)
end

def change_public_key_user_and_hostname ()
	command = "sed -i'' -e \"s/#{$user_hostname_generated}/#{$user_hostname_replacement}/\" #{$public_key}"
	return sh (command)
end

def move_private_key ()
	command = "mv #{$generated_private_key} #{$private_key}"
	return sh (command)
end

def return_private_key_content ()
	return File.read($private_key)
end

def remove_private_key ()
	command = "rm #{$private_key}"
	return sh (command)
end

# Execution

set_variables
verify_puppetmaster_environment

if ! store_private_key and public_key_exists
	return
end

unless private_key_exists
	generate_keys
	move_private_key
	move_public_key
	change_public_key_user_and_hostname
end

private_key_content = return_private_key_content

unless store_private_key
	remove_private_key
end

%><%= private_key_content %>
